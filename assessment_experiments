{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "43eff579",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-11-23T21:18:29.980892Z",
     "iopub.status.busy": "2024-11-23T21:18:29.980360Z",
     "iopub.status.idle": "2024-11-23T21:18:36.274967Z",
     "shell.execute_reply": "2024-11-23T21:18:36.273529Z"
    },
    "papermill": {
     "duration": 6.30381,
     "end_time": "2024-11-23T21:18:36.277491",
     "exception": false,
     "start_time": "2024-11-23T21:18:29.973681",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "raw_survey_df: 65437\n",
      "schema_df: 87\n",
      "extended_schema_df: 114\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import json\n",
    "\n",
    "\n",
    "survey_data_path = \"/kaggle/input/stackoverflow-survey-2024/survey_results_public.csv\"        \n",
    "survey_schema_path = \"/kaggle/input/stackoverflow-survey-2024/survey_results_schema.csv\"\n",
    "survey_schema_extended_path = \"/kaggle/input/survey-results-schema-extended-csv-2/enhanced_schema - Sheet4.csv\"\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "default_cols = [\"ConvertedCompYearly\", \"ResponseId\"]\n",
    "\n",
    "\n",
    "raw_survey_df = pd.read_csv(survey_data_path)\n",
    "print(f\"raw_survey_df: {raw_survey_df.shape[0]}\")\n",
    "all_cols = list(raw_survey_df.columns.values)\n",
    "\n",
    "schema_df = pd.read_csv(survey_schema_path)\n",
    "print(f\"schema_df: {schema_df.shape[0]}\")\n",
    "extended_schema_df = pd.read_csv(survey_schema_extended_path)\n",
    "print(f\"extended_schema_df: {extended_schema_df.shape[0]}\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7b45c95e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-23T21:18:36.284596Z",
     "iopub.status.busy": "2024-11-23T21:18:36.284104Z",
     "iopub.status.idle": "2024-11-23T21:18:36.312605Z",
     "shell.execute_reply": "2024-11-23T21:18:36.311494Z"
    },
    "papermill": {
     "duration": 0.034625,
     "end_time": "2024-11-23T21:18:36.314959",
     "exception": false,
     "start_time": "2024-11-23T21:18:36.280334",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\n",
      "    \"category\": [\n",
      "        \"EdLevel\",\n",
      "        \"DevType\",\n",
      "        \"OrgSize\",\n",
      "        \"PurchaseInfluence\",\n",
      "        \"Country\",\n",
      "        \"ICorPM\",\n",
      "        \"Industry\"\n",
      "    ],\n",
      "    \"multiple_choice\": [\n",
      "        \"Employment\",\n",
      "        \"LanguageHaveWorkedWith\",\n",
      "        \"DatabaseHaveWorkedWith\",\n",
      "        \"PlatformHaveWorkedWith\",\n",
      "        \"WebframeHaveWorkedWith\",\n",
      "        \"EmbeddedHaveWorkedWith\",\n",
      "        \"MiscTechHaveWorkedWith\",\n",
      "        \"ToolsTechHaveWorkedWith\"\n",
      "    ],\n",
      "    \"number\": [\n",
      "        \"ResponseId\",\n",
      "        \"Age\",\n",
      "        \"YearsCode\",\n",
      "        \"YearsCodePro\",\n",
      "        \"WorkExp\"\n",
      "    ]\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "default_questions = [\"ConvertedCompYearly\", \"ResponseId\"]\n",
    "\n",
    "selected_questions = default_questions + [\"Age\",\"Employment\",\"YearsCode\",\"YearsCodePro\",\"DevType\",\"Country\",\"ICorPM\",\"WorkExp\",\"Industry\",\"EdLevel\",\"OrgSize\",\"PurchaseInfluence\",\"LanguageHaveWorkedWith\",\"DatabaseHaveWorkedWith\",\"PlatformHaveWorkedWith\",\"WebframeHaveWorkedWith\",\"EmbeddedHaveWorkedWith\",\"MiscTechHaveWorkedWith\",\"ToolsTechHaveWorkedWith\",]\n",
    "\n",
    "selected_questions_df = extended_schema_df.loc[(extended_schema_df[\"survey_column\"].isin(selected_questions))]\n",
    "\n",
    "\n",
    "\n",
    "columns_by_type = selected_questions_df.groupby(\"type\")[\"survey_column\"].apply(list).to_dict()\n",
    "\n",
    "import json\n",
    "print(json.dumps(columns_by_type, indent=4))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e91777e4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-23T21:18:36.321955Z",
     "iopub.status.busy": "2024-11-23T21:18:36.321442Z",
     "iopub.status.idle": "2024-11-23T21:18:36.398035Z",
     "shell.execute_reply": "2024-11-23T21:18:36.396936Z"
    },
    "papermill": {
     "duration": 0.083202,
     "end_time": "2024-11-23T21:18:36.400850",
     "exception": false,
     "start_time": "2024-11-23T21:18:36.317648",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# remove empty salary\n",
    "survey_df = raw_survey_df.dropna(subset=[\"CompTotal\"])\n",
    "survey_df = survey_df[selected_questions]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f884a4a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-23T21:18:36.408669Z",
     "iopub.status.busy": "2024-11-23T21:18:36.407748Z",
     "iopub.status.idle": "2024-11-23T21:18:43.929520Z",
     "shell.execute_reply": "2024-11-23T21:18:43.928269Z"
    },
    "papermill": {
     "duration": 7.528829,
     "end_time": "2024-11-23T21:18:43.932389",
     "exception": false,
     "start_time": "2024-11-23T21:18:36.403560",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import OneHotEncoder\n",
    "\n",
    "# MULTIPLE OPTION QUESTIONS\n",
    "\n",
    "\n",
    "\n",
    "def encode_multiple_choice_questions(survey_df, multiple_option_questions):\n",
    "    # Create a copy of the DataFrame to avoid chained assignment issues\n",
    "    survey_df = survey_df.copy()\n",
    "    \n",
    "    multiple_option_questions_details = {}\n",
    "    new_columns = {}  # Dictionary to store all new binary columns\n",
    "\n",
    "    for q in multiple_option_questions:\n",
    "        survey_df.loc[:, q] = survey_df[q].fillna(\"Unknown\")\n",
    "\n",
    "        unique_options = set(\n",
    "            option.strip() \n",
    "            for response in survey_df[q] \n",
    "            for option in response.split(';') if isinstance(response, str)\n",
    "        )\n",
    "        unique_options_list = sorted(unique_options)\n",
    "        \n",
    "        multiple_option_questions_details[q] = unique_options_list\n",
    "\n",
    "        # Create binary columns for each unique option with a prefix\n",
    "        for option in unique_options_list:\n",
    "            prefixed_option = f\"{q}_{option}\"  # Add prefix\n",
    "            new_columns[prefixed_option] = survey_df[q].apply(\n",
    "                lambda x: 1 if isinstance(x, str) and option in x.split(\";\") else 0\n",
    "            )\n",
    "    \n",
    "    # Combine the new columns with the original DataFrame\n",
    "    new_columns_df = pd.DataFrame(new_columns)\n",
    "    survey_df = pd.concat([survey_df, new_columns_df], axis=1)\n",
    "    survey_df = survey_df.drop(columns=multiple_option_questions)\n",
    "    \n",
    "    return survey_df\n",
    "\n",
    "\n",
    "    \n",
    "    \n",
    "multiple_option_questions = columns_by_type[\"multiple_choice\"] \n",
    "survey_df = encode_multiple_choice_questions(survey_df=survey_df, multiple_option_questions=multiple_option_questions)\n",
    "\n",
    "# print(list(survey_df.columns))\n",
    "# survey_sample_df = survey_df.sample(n=10, random_state=42)\n",
    "# print(survey_sample_df)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1e966f5e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-23T21:18:43.940677Z",
     "iopub.status.busy": "2024-11-23T21:18:43.939256Z",
     "iopub.status.idle": "2024-11-23T21:18:44.353627Z",
     "shell.execute_reply": "2024-11-23T21:18:44.352061Z"
    },
    "papermill": {
     "duration": 0.422065,
     "end_time": "2024-11-23T21:18:44.357235",
     "exception": false,
     "start_time": "2024-11-23T21:18:43.935170",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['EdLevel_Associate degree (A.A., A.S., etc.)'\n",
      " 'EdLevel_Bachelor’s degree (B.A., B.S., B.Eng., etc.)'\n",
      " 'EdLevel_Master’s degree (M.A., M.S., M.Eng., MBA, etc.)'\n",
      " 'EdLevel_Primary/elementary school'\n",
      " 'EdLevel_Professional degree (JD, MD, Ph.D, Ed.D, etc.)'\n",
      " 'EdLevel_Secondary school (e.g. American high school, German Realschule or Gymnasium, etc.)'\n",
      " 'EdLevel_Some college/university study without earning a degree'\n",
      " 'EdLevel_Something else' 'DevType_Academic researcher'\n",
      " 'DevType_Blockchain' 'DevType_Cloud infrastructure engineer'\n",
      " 'DevType_Data engineer' 'DevType_Data or business analyst'\n",
      " 'DevType_Data scientist or machine learning specialist'\n",
      " 'DevType_Database administrator' 'DevType_Designer'\n",
      " 'DevType_DevOps specialist' 'DevType_Developer Advocate'\n",
      " 'DevType_Developer Experience' 'DevType_Developer, AI'\n",
      " 'DevType_Developer, QA or test' 'DevType_Developer, back-end'\n",
      " 'DevType_Developer, desktop or enterprise applications'\n",
      " 'DevType_Developer, embedded applications or devices'\n",
      " 'DevType_Developer, front-end' 'DevType_Developer, full-stack'\n",
      " 'DevType_Developer, game or graphics' 'DevType_Developer, mobile'\n",
      " 'DevType_Educator' 'DevType_Engineer, site reliability'\n",
      " 'DevType_Engineering manager' 'DevType_Hardware Engineer'\n",
      " 'DevType_Marketing or sales professional'\n",
      " 'DevType_Other (please specify):' 'DevType_Product manager'\n",
      " 'DevType_Project manager' 'DevType_Research & Development role'\n",
      " 'DevType_Scientist' 'DevType_Security professional'\n",
      " 'DevType_Senior Executive (C-Suite, VP, etc.)' 'DevType_Student'\n",
      " 'DevType_System administrator' 'DevType_nan'\n",
      " 'OrgSize_1,000 to 4,999 employees' 'OrgSize_10 to 19 employees'\n",
      " 'OrgSize_10,000 or more employees' 'OrgSize_100 to 499 employees'\n",
      " 'OrgSize_2 to 9 employees' 'OrgSize_20 to 99 employees'\n",
      " 'OrgSize_5,000 to 9,999 employees' 'OrgSize_500 to 999 employees'\n",
      " 'OrgSize_I don’t know'\n",
      " 'OrgSize_Just me - I am a freelancer, sole proprietor, etc.'\n",
      " 'OrgSize_nan' 'PurchaseInfluence_I have a great deal of influence'\n",
      " 'PurchaseInfluence_I have little or no influence'\n",
      " 'PurchaseInfluence_I have some influence' 'PurchaseInfluence_nan'\n",
      " 'Country_Afghanistan' 'Country_Albania' 'Country_Algeria'\n",
      " 'Country_Andorra' 'Country_Angola' 'Country_Antigua and Barbuda'\n",
      " 'Country_Argentina' 'Country_Armenia' 'Country_Australia'\n",
      " 'Country_Austria' 'Country_Azerbaijan' 'Country_Bahrain'\n",
      " 'Country_Bangladesh' 'Country_Barbados' 'Country_Belarus'\n",
      " 'Country_Belgium' 'Country_Benin' 'Country_Bhutan' 'Country_Bolivia'\n",
      " 'Country_Bosnia and Herzegovina' 'Country_Botswana' 'Country_Brazil'\n",
      " 'Country_Brunei Darussalam' 'Country_Bulgaria' 'Country_Burkina Faso'\n",
      " 'Country_Burundi' 'Country_Cambodia' 'Country_Cameroon' 'Country_Canada'\n",
      " 'Country_Cape Verde' 'Country_Central African Republic' 'Country_Chad'\n",
      " 'Country_Chile' 'Country_China' 'Country_Colombia'\n",
      " 'Country_Congo, Republic of the...' 'Country_Costa Rica'\n",
      " 'Country_Croatia' 'Country_Cuba' 'Country_Cyprus'\n",
      " 'Country_Czech Republic' \"Country_Côte d'Ivoire\"\n",
      " \"Country_Democratic People's Republic of Korea\"\n",
      " 'Country_Democratic Republic of the Congo' 'Country_Denmark'\n",
      " 'Country_Dominican Republic' 'Country_Ecuador' 'Country_Egypt'\n",
      " 'Country_El Salvador' 'Country_Estonia' 'Country_Ethiopia' 'Country_Fiji'\n",
      " 'Country_Finland' 'Country_France' 'Country_Gabon' 'Country_Georgia'\n",
      " 'Country_Germany' 'Country_Ghana' 'Country_Greece' 'Country_Guatemala'\n",
      " 'Country_Guyana' 'Country_Haiti' 'Country_Honduras'\n",
      " 'Country_Hong Kong (S.A.R.)' 'Country_Hungary' 'Country_Iceland'\n",
      " 'Country_India' 'Country_Indonesia'\n",
      " 'Country_Iran, Islamic Republic of...' 'Country_Iraq' 'Country_Ireland'\n",
      " 'Country_Isle of Man' 'Country_Israel' 'Country_Italy' 'Country_Jamaica'\n",
      " 'Country_Japan' 'Country_Jordan' 'Country_Kazakhstan' 'Country_Kenya'\n",
      " 'Country_Kosovo' 'Country_Kuwait' 'Country_Kyrgyzstan'\n",
      " \"Country_Lao People's Democratic Republic\" 'Country_Latvia'\n",
      " 'Country_Lebanon' 'Country_Lesotho' 'Country_Libyan Arab Jamahiriya'\n",
      " 'Country_Liechtenstein' 'Country_Lithuania' 'Country_Luxembourg'\n",
      " 'Country_Madagascar' 'Country_Malawi' 'Country_Malaysia'\n",
      " 'Country_Maldives' 'Country_Mali' 'Country_Malta' 'Country_Mauritania'\n",
      " 'Country_Mauritius' 'Country_Mexico' 'Country_Monaco' 'Country_Mongolia'\n",
      " 'Country_Montenegro' 'Country_Morocco' 'Country_Mozambique'\n",
      " 'Country_Myanmar' 'Country_Namibia' 'Country_Nepal' 'Country_Netherlands'\n",
      " 'Country_New Zealand' 'Country_Nicaragua' 'Country_Niger'\n",
      " 'Country_Nigeria' 'Country_Nomadic' 'Country_Norway' 'Country_Oman'\n",
      " 'Country_Pakistan' 'Country_Palestine' 'Country_Panama'\n",
      " 'Country_Paraguay' 'Country_Peru' 'Country_Philippines' 'Country_Poland'\n",
      " 'Country_Portugal' 'Country_Qatar' 'Country_Republic of Korea'\n",
      " 'Country_Republic of Moldova' 'Country_Republic of North Macedonia'\n",
      " 'Country_Romania' 'Country_Russian Federation' 'Country_Rwanda'\n",
      " 'Country_Samoa' 'Country_Saudi Arabia' 'Country_Senegal' 'Country_Serbia'\n",
      " 'Country_Sierra Leone' 'Country_Singapore' 'Country_Slovakia'\n",
      " 'Country_Slovenia' 'Country_Somalia' 'Country_South Africa'\n",
      " 'Country_South Korea' 'Country_Spain' 'Country_Sri Lanka' 'Country_Sudan'\n",
      " 'Country_Suriname' 'Country_Swaziland' 'Country_Sweden'\n",
      " 'Country_Switzerland' 'Country_Syrian Arab Republic' 'Country_Taiwan'\n",
      " 'Country_Tajikistan' 'Country_Thailand' 'Country_Togo'\n",
      " 'Country_Trinidad and Tobago' 'Country_Tunisia' 'Country_Turkey'\n",
      " 'Country_Turkmenistan' 'Country_Uganda' 'Country_Ukraine'\n",
      " 'Country_United Arab Emirates'\n",
      " 'Country_United Kingdom of Great Britain and Northern Ireland'\n",
      " 'Country_United Republic of Tanzania' 'Country_United States of America'\n",
      " 'Country_Uruguay' 'Country_Uzbekistan'\n",
      " 'Country_Venezuela, Bolivarian Republic of...' 'Country_Viet Nam'\n",
      " 'Country_Yemen' 'Country_Zambia' 'Country_Zimbabwe'\n",
      " 'ICorPM_Individual contributor' 'ICorPM_People manager' 'ICorPM_nan'\n",
      " 'Industry_Banking/Financial Services'\n",
      " 'Industry_Computer Systems Design and Services' 'Industry_Energy'\n",
      " 'Industry_Fintech' 'Industry_Government' 'Industry_Healthcare'\n",
      " 'Industry_Higher Education' 'Industry_Insurance'\n",
      " 'Industry_Internet, Telecomm or Information Services'\n",
      " 'Industry_Manufacturing' 'Industry_Media & Advertising Services'\n",
      " 'Industry_Other:' 'Industry_Retail and Consumer Services'\n",
      " 'Industry_Software Development'\n",
      " 'Industry_Transportation, or Supply Chain' 'Industry_nan']\n",
      "       ConvertedCompYearly  ResponseId              Age         YearsCode  \\\n",
      "25090             138117.0     25091.0  25-34 years old                16   \n",
      "29267              42038.0     29268.0  25-34 years old                 7   \n",
      "19471             126486.0     19472.0  55-64 years old                41   \n",
      "22252              74110.0     22253.0  35-44 years old                18   \n",
      "52445                  NaN     52446.0  35-44 years old                 6   \n",
      "28836              61457.0     28837.0  45-54 years old                40   \n",
      "37399              67476.0     37400.0  25-34 years old                11   \n",
      "7695               16648.0      7696.0  25-34 years old  Less than 1 year   \n",
      "25068             300000.0     25069.0  25-34 years old                15   \n",
      "19500             194000.0     19501.0  55-64 years old                44   \n",
      "\n",
      "           YearsCodePro  WorkExp  Employment_Employed, full-time  \\\n",
      "25090                 8      NaN                             1.0   \n",
      "29267                 7     11.0                             1.0   \n",
      "19471                36      NaN                             0.0   \n",
      "22252                16     10.0                             1.0   \n",
      "52445                 4      4.0                             1.0   \n",
      "28836                35      NaN                             1.0   \n",
      "37399                 8      NaN                             1.0   \n",
      "7695   Less than 1 year      NaN                             0.0   \n",
      "25068                11     11.0                             1.0   \n",
      "19500                40     40.0                             1.0   \n",
      "\n",
      "       Employment_Employed, part-time  \\\n",
      "25090                             0.0   \n",
      "29267                             0.0   \n",
      "19471                             0.0   \n",
      "22252                             0.0   \n",
      "52445                             0.0   \n",
      "28836                             0.0   \n",
      "37399                             0.0   \n",
      "7695                              0.0   \n",
      "25068                             0.0   \n",
      "19500                             0.0   \n",
      "\n",
      "       Employment_Independent contractor, freelancer, or self-employed  \\\n",
      "25090                                                0.0                 \n",
      "29267                                                0.0                 \n",
      "19471                                                1.0                 \n",
      "22252                                                0.0                 \n",
      "52445                                                0.0                 \n",
      "28836                                                0.0                 \n",
      "37399                                                0.0                 \n",
      "7695                                                 1.0                 \n",
      "25068                                                0.0                 \n",
      "19500                                                0.0                 \n",
      "\n",
      "       Employment_Not employed, and not looking for work  ...  \\\n",
      "25090                                                0.0  ...   \n",
      "29267                                                0.0  ...   \n",
      "19471                                                0.0  ...   \n",
      "22252                                                0.0  ...   \n",
      "52445                                                0.0  ...   \n",
      "28836                                                0.0  ...   \n",
      "37399                                                0.0  ...   \n",
      "7695                                                 0.0  ...   \n",
      "25068                                                0.0  ...   \n",
      "19500                                                0.0  ...   \n",
      "\n",
      "       Industry_Higher Education  Industry_Insurance  \\\n",
      "25090                        0.0                 0.0   \n",
      "29267                        0.0                 0.0   \n",
      "19471                        0.0                 0.0   \n",
      "22252                        1.0                 0.0   \n",
      "52445                        NaN                 NaN   \n",
      "28836                        0.0                 0.0   \n",
      "37399                        NaN                 NaN   \n",
      "7695                         0.0                 0.0   \n",
      "25068                        0.0                 0.0   \n",
      "19500                        0.0                 0.0   \n",
      "\n",
      "       Industry_Internet, Telecomm or Information Services  \\\n",
      "25090                                                0.0     \n",
      "29267                                                0.0     \n",
      "19471                                                0.0     \n",
      "22252                                                0.0     \n",
      "52445                                                NaN     \n",
      "28836                                                0.0     \n",
      "37399                                                NaN     \n",
      "7695                                                 0.0     \n",
      "25068                                                0.0     \n",
      "19500                                                0.0     \n",
      "\n",
      "       Industry_Manufacturing  Industry_Media & Advertising Services  \\\n",
      "25090                     0.0                                    0.0   \n",
      "29267                     0.0                                    0.0   \n",
      "19471                     0.0                                    0.0   \n",
      "22252                     0.0                                    0.0   \n",
      "52445                     NaN                                    NaN   \n",
      "28836                     0.0                                    0.0   \n",
      "37399                     NaN                                    NaN   \n",
      "7695                      0.0                                    0.0   \n",
      "25068                     0.0                                    0.0   \n",
      "19500                     0.0                                    0.0   \n",
      "\n",
      "       Industry_Other:  Industry_Retail and Consumer Services  \\\n",
      "25090              0.0                                    1.0   \n",
      "29267              1.0                                    0.0   \n",
      "19471              0.0                                    0.0   \n",
      "22252              0.0                                    0.0   \n",
      "52445              NaN                                    NaN   \n",
      "28836              0.0                                    0.0   \n",
      "37399              NaN                                    NaN   \n",
      "7695               0.0                                    0.0   \n",
      "25068              1.0                                    0.0   \n",
      "19500              0.0                                    0.0   \n",
      "\n",
      "       Industry_Software Development  \\\n",
      "25090                            0.0   \n",
      "29267                            0.0   \n",
      "19471                            0.0   \n",
      "22252                            0.0   \n",
      "52445                            NaN   \n",
      "28836                            0.0   \n",
      "37399                            NaN   \n",
      "7695                             1.0   \n",
      "25068                            0.0   \n",
      "19500                            1.0   \n",
      "\n",
      "       Industry_Transportation, or Supply Chain  Industry_nan  \n",
      "25090                                       0.0           0.0  \n",
      "29267                                       0.0           0.0  \n",
      "19471                                       0.0           0.0  \n",
      "22252                                       0.0           0.0  \n",
      "52445                                       NaN           NaN  \n",
      "28836                                       0.0           1.0  \n",
      "37399                                       NaN           NaN  \n",
      "7695                                        0.0           0.0  \n",
      "25068                                       0.0           0.0  \n",
      "19500                                       0.0           0.0  \n",
      "\n",
      "[10 rows x 508 columns]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "\n",
    "# SINGLE OPTION QUESTIONS        \n",
    "\n",
    "def encode_single_choice_questions(survey_df, single_option_questions):    \n",
    "    encoder = OneHotEncoder(sparse_output=False)\n",
    "\n",
    "    encoded_data = encoder.fit_transform(survey_df[single_option_questions])\n",
    "    encoded_feature_names = encoder.get_feature_names_out(single_option_questions)\n",
    "    print(encoded_feature_names)\n",
    "    encoded_df = pd.DataFrame(encoded_data, columns=encoded_feature_names)\n",
    "    final_df = pd.concat([survey_df.drop(columns=single_option_questions), encoded_df], axis=1)\n",
    "    \n",
    "    return final_df\n",
    "    \n",
    "    \n",
    "    \n",
    "single_option_questions = columns_by_type[\"category\"] \n",
    "survey_df = encode_single_choice_questions(survey_df=survey_df, single_option_questions=single_option_questions)\n",
    "\n",
    "survey_sample_df = survey_df.sample(n=10, random_state=42)\n",
    "print(survey_sample_df)\n",
    "\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5963963,
     "sourceId": 9742924,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6151326,
     "sourceId": 9994373,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6151371,
     "sourceId": 9994442,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30786,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 18.223473,
   "end_time": "2024-11-23T21:18:45.284237",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-11-23T21:18:27.060764",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
